/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kevoree.tools.war.wrapperplugin

/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.{FileWriter, File}
import org.apache.maven.project.MavenProject


/**
 * Created by IntelliJ IDEA.
 * User: duke
 * Date: 18/12/11
 * Time: 20:00
 */

object WrapperGenerator {

  def generate(targetDir: File, project: MavenProject, paramNames: List[String],exclusions: Array[String]) {

    var name = project.getArtifactId
    if (name.contains(".")) {
      name = name.substring(name.lastIndexOf(".") + 1)
    }

    val nameUp = name.charAt(0).toUpper + name.substring(1)
    val wrapperFile = new File(targetDir.getAbsolutePath + File.separator + project.getGroupId.replace(".", File.separator) + File.separator + project.getArtifactId.replace(".", File.separator) + File.separator + nameUp + ".java")
    ZipHelper.createParentDirs(wrapperFile)

    if (!wrapperFile.exists()) {
      val fw = new FileWriter(wrapperFile)
      fw.append("//Generated by Kevoree WebServer War Wrapper\n")
      fw.append("package " + project.getGroupId + "." + project.getArtifactId + ";\n")
      fw.append("import org.osgi.framework.Bundle;\n")
      fw.append("import org.kevoree.framework.*;\n")
      fw.append("import winstone.Launcher;\n")

      fw.append("@org.kevoree.annotation.Library(name=\"JavaSE\")\n")

      fw.append("@org.kevoree.annotation.DictionaryType({\n")
      fw.append("@org.kevoree.annotation.DictionaryAttribute(name =\"port\", defaultValue = \"8080\", optional = true)\n")
      paramNames.foreach {
        p =>
          fw.append(",@org.kevoree.annotation.DictionaryAttribute(name =\"" + p + "\")")
      }
      fw.append("})")
      fw.append("@org.kevoree.annotation.ComponentType\n")

      fw.append("public class " + nameUp + " extends AbstractComponentType {\n")

      fw.append("Launcher launcher = null;\n")

      fw.append("@org.kevoree.annotation.Start\n")
      fw.append("public void start() {\n")
      
      fw.append("try {")
      
      fw.append("final Bundle b = (Bundle)this.getDictionary().get(\"osgi.bundle\");")
      fw.append("java.util.Map config = new java.util.HashMap();\n")
      fw.append("config.put(\"ajp13Port\",\"-1\");\n")

      val inclusion = (exclusions++List(".filtered")).mkString("\"","\",\"","\"")
      fw.append(" java.io.File jarFile = org.kevoree.framework.FileNIOHelper.resolveBundleJar(b, new java.io.File(System.getProperty(\"osgi.cache\")));\n")
      fw.append(" java.io.File tempWar = java.io.File.createTempFile(\"-t-\", \"-t-\");\n")
      fw.append(" tempWar.delete();\n")
      fw.append(" tempWar.mkdirs();\n")
      fw.append("  org.kevoree.framework.FileNIOHelper.unzipToTempDir(jarFile,tempWar,java.util.Arrays.asList("+inclusion+"),java.util.Arrays.asList(\".jar\"));\n")
      fw.append(" org.kevoree.framework.WebInfHelper.setWebInfParams(tempWar, getDictionary()).getAbsolutePath();\n")
      fw.append("config.put(\"webroot\", tempWar.getAbsolutePath());\n")
      fw.append("Launcher.initLogger(config);\n")
      fw.append("launcher = new Launcher(config);\n")

      
      fw.append("} catch (Exception e) {e.printStackTrace();  }\n")
      fw.append("}//END START METHOD\n")

      fw.append("@org.kevoree.annotation.Stop\n")
      fw.append("public void stop() {\n")
      fw.append("    try {launcher.shutdown();\n    } catch (Exception e) {e.printStackTrace();  }\n")
      fw.append(" }\n")

      fw.append("@org.kevoree.annotation.Update\n    public void update() {\n        stop();\n        start();\n    }")
      fw.append("}\n")
      fw.close()
    }


  }

}